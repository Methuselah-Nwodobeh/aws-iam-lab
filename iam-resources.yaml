AWSTemplateFormatVersion: '2025-05-21'
Description: 'CloudFormation template to create IAM users, groups, and related resources'

Parameters:
  S3UserEmail:
    Type: String
    Description: Email for the S3 user
    Default: mobi1crestx@gmail.com
  
  EC2UserEmail:
    Type: String
    Description: Email for the EC2 user
    Default: nwodobehm@gmail.com

Resources:
  # Generate a random password to be used for all users
  TempPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: IAMUsersTemporaryPassword
      GenerateSecretString:
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true

  # Create S3 User Group with S3 Read Access
  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3ReadOnlyGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  # Create EC2 User Group with EC2 Read Access
  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2ReadOnlyGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  # Create S3 User
  S3User:
    Type: AWS::IAM::User
    Properties:
      UserName: s3-user
      Groups:
        - !Ref S3UserGroup
      LoginProfile:
        Password: !Join ['', ['{{resolve:secretsmanager:', !Ref TempPassword, ':SecretString}}' ]]
        PasswordResetRequired: true
      Tags:
        - Key: Email
          Value: !Ref S3UserEmail

  # Create EC2 User
  EC2User:
    Type: AWS::IAM::User
    Properties:
      UserName: ec2-user
      Groups:
        - !Ref EC2UserGroup
      LoginProfile:
        Password: !Join ['', ['{{resolve:secretsmanager:', !Ref TempPassword, ':SecretString}}' ]]
        PasswordResetRequired: true
      Tags:
        - Key: Email
          Value: !Ref EC2UserEmail

  # Store user emails in Parameter Store
  S3UserEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /IAM/Users/s3-user/Email
      Type: String
      Value: !Ref S3UserEmail
      Description: Email address for s3-user

  EC2UserEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /IAM/Users/ec2-user/Email
      Type: String
      Value: !Ref EC2UserEmail
      Description: Email address for ec2-user

  # Create IAM role for Lambda execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UserCreationNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - secretsmanager:GetSecretValue
                  - iam:GetUser
                Resource: '*'

  # Lambda function to process new user creation events
  UserCreationNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info("Received event: " + json.dumps(event))
              
              # Extract user details from CloudTrail event
              detail = event.get('detail', {})
              request_parameters = detail.get('requestParameters', {})
              user_name = request_parameters.get('userName', '')
              
              if not user_name:
                  logger.warning("No username found in the event")
                  return
              
              try:
                  # Get user details from IAM
                  iam_client = boto3.client('iam')
                  user_response = iam_client.get_user(UserName=user_name)
                  
                  # Look for Email tag
                  email = None
                  if 'Tags' in user_response['User']:
                      for tag in user_response['User']['Tags']:
                          if tag['Key'] == 'Email':
                              email = tag['Value']
                              break
                  
                  # Try to get email from Parameter Store if tag is not available
                  if not email:
                      ssm_client = boto3.client('ssm')
                      try:
                          email_param = ssm_client.get_parameter(
                              Name=f'/IAM/Users/{user_name}/Email',
                              WithDecryption=True
                          )
                          email = email_param['Parameter']['Value']
                      except Exception as e:
                          logger.warning(f"Could not retrieve email from Parameter Store: {e}")
                  
                  # Get temporary password from Secrets Manager
                  secrets_client = boto3.client('secretsmanager')
                  secret_response = secrets_client.get_secret_value(
                      SecretId='IAMUsersTemporaryPassword'
                  )
                  temp_password = secret_response['SecretString']
                  
                  # Log the information (in a real scenario, you might send an email)
                  logger.info(f"User Created: {user_name}")
                  logger.info(f"User Email: {email}")
                  logger.info(f"Temporary Password: {temp_password}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(f'Successfully processed user creation for {user_name}')
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing user creation: {e}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error processing user creation: {str(e)}')
                  }

  # EventBridge rule to detect new user creation
  UserCreationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IAMUserCreationRule
      Description: "Rule to detect IAM user creation events"
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser
      State: ENABLED
      Targets:
        - Arn: !GetAtt UserCreationNotificationFunction.Arn
          Id: "UserCreationLambdaTarget"

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UserCreationNotificationFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UserCreationEventRule.Arn

Outputs:
  TemporaryPasswordSecret:
    Description: Secret containing the temporary password
    Value: !Ref TempPassword
  
  S3User:
    Description: IAM user with S3 read access
    Value: !Ref S3User
  
  EC2User:
    Description: IAM user with EC2 read access
    Value: !Ref EC2User
  
  LambdaFunction:
    Description: Lambda function for processing user creation events
    Value: !Ref UserCreationNotificationFunction